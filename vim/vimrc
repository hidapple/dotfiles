"================================
" Vim-Plug
"================================
let g:python_host_prog = system("echo -n $(which python2)")
let g:python3_host_prog = system("echo -n $(which python3)")

call plug#begin(stdpath('data') . '/plugged')
Plug 'tomasr/molokai'
Plug 'itchyny/lightline.vim'
let g:lightline = { 'colorscheme': 'wombat' }

Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
let g:deoplete#enable_at_startup = 1

Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'
Plug 'ujihisa/neco-look'

Plug 'airblade/vim-gitgutter'

Plug 'vim-scripts/surround.vim'

Plug 'tyru/caw.vim'
nmap <C-_> <Plug>(caw:hatpos:toggle)
vmap <C-_> <Plug>(caw:hatpos:toggle)

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
let g:fzf_layout = { 'down': '~40%' }
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
" Override Files command to include dotfiles
command! -bang -nargs=? -complete=dir Files
\ call fzf#vim#files(<q-args>, { 'source': 'ag --hidden --ignore .git -g ""' }, <bang>0)
" Key mapping
nnoremap ,f  :Files<CR>
nnoremap ,gf :GFiles<CR>
nnoremap ,b  :Buffers<CR>
nnoremap ,ag :Ag<CR>

Plug 'neomake/neomake'
Plug 'benjie/neomake-local-eslint.vim'
autocmd! BufWritePost * Neomake
let g:neomake_python_enabled_makers = ['python', 'flake8']
let g:neomake_javascript_enabled_makers = ['eslint']
let g:neomake_error_sign = {'text': 'X', 'texthl': 'Repeat'}
let g:neomake_warning_sign = {'text': '!', 'texthl': 'QuickFixLine'}

Plug 'tyru/open-browser.vim'
Plug 'kannokanno/previm'
let g:netrw_nogx = 1
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)


" Language Support
Plug 'sheerun/vim-polyglot'
let g:polyglot_disabled = ['markdown']

Plug 'dhruvasagar/vim-table-mode'

Plug 'fatih/vim-go'
let g:go_fmt_command = 'goimports'
let g:go_metalinter_autosave = 1
let g:go_metalinter_autosave_enabled = ['vet', 'golint']
nnoremap ,d :GoDecls<CR>

Plug 'tomlion/vim-solidity'

call plug#end()

"================================
" Settings
"================================
filetype plugin indent on
set encoding=utf-8
scriptencoding utf-8

""" Color Scheme
syntax enable
colorscheme molokai
set t_Co=256

""" Status Line
set laststatus=2
set noshowmode

""" Indent
set autoindent
set smartindent
set expandtab
set tabstop=2
set shiftwidth=2

""" Options
set relativenumber
set number
set title
set ruler
set cursorline
set cursorcolumn
set showmatch
set list
set listchars=tab:\|\ ,trail:_,extends:»,precedes:«
set visualbell t_vb=
set smartcase
set incsearch
set hlsearch
set wrapscan
set backspace=indent,eol,start
set formatoptions+=mMj

""" Extend % matching
source $VIMRUNTIME/macros/matchit.vim

""" Jump to the last cursor position with file open
augroup jumpPos
  autocmd BufRead * if line("'\"") > 0 && line("'\"") <= line("$") |
  \ exe "normal g`\"" | endif
augroup END

"================================
" Filetype
"================================
augroup ftype
  autocmd BufNewFile,BufRead *.{html,htm} set filetype=html
  autocmd BufNewFile,BufRead Jenkinsfile* set filetype=groovy
  autocmd BufNewFile,BufRead .tmux.conf set filetype=tmux
  autocmd FileType go setlocal textwidth=100
augroup END

"================================
" Key mapping
"================================
inoremap { {}<LEFT>
inoremap [ []<LEFT>
inoremap ( ()<LEFT>
inoremap {<Enter> {}<LEFT><CR><ESC><S-o>
inoremap [<Enter> []<LEFT><CR><ESC><S-o>
inoremap (<Enter> ()<LEFT><CR><ESC><S-o>
inoremap '' ''<LEFT>
inoremap "" ""<LEFT>
noremap s> <C-w>>
noremap s< <C-w><
noremap s+ <C-w>+
noremap s- <C-w>-
noremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>
map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
